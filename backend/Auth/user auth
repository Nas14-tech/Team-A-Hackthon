const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

// Secret key for JWT
const secretKey = 'yourSecretKey'; // Change this to your secret key

// Dummy user data
const users = [
    {
        username: 'user1',
        password: 'password1',
        role: 'admin'
    },
    {
        username: 'user2',
        password: 'password2',
        role: 'user'
    }
];

// Middleware to parse JSON requests
app.use(bodyParser.json());

// Login route
app.post('/login', (req, res) => {
    const { username, password } = req.body;

    // Check if username and password are provided
    if (!username || !password) {
        return res.status(400).json({ message: 'Username and password are required.' });
    }

    // Find user in the dummy database
    const user = users.find(u => u.username === username && u.password === password);

    // Check if user exists
    if (!user) {
        return res.status(401).json({ message: 'Invalid username or password.' });
    }

    // Generate JWT token
    const token = jwt.sign({ username: user.username, role: user.role }, secretKey, { expiresIn: '1h' });

    // Send token in response
    res.json({ token });
});

// Middleware to verify JWT token
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    // Check if token is provided
    if (!token) {
        return res.status(401).json({ message: 'Token not provided.' });
    }

    // Verify token
    jwt.verify(token, secretKey, (err, user) => {
        if (err) {
            return res.status(403).json({ message: 'Invalid token.' });
        }
        req.user = user;
        next();
    });
}

// Protected route
app.get('/protected', authenticateToken, (req, res) => {
    // If the token is valid, return some protected information
    res.json({ message: 'Protected information', user: req.user });
});

// Start server
app.listen(port, () => {
    console.log(`Server is listening on port ${port}`);
});
